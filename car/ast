
running 1 test
test tests::test_functions ... ok

successes:

---- tests::test_functions stdout ----
AST:
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    empty,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    id,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    x,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                i32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        i32,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            x,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        None,
                    ),
                ],
            },
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    proj1,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    x,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                f32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                    Comma,
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    y,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                f32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        f32,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            x,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        None,
                    ),
                ],
            },
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
    ],
}
compiler: Compiler {
    names_to_h: {
        "empty": "06e03924b67bf0ce7116a6e8ecd2b51ff16117ba",
        "id": "5e97f513f0a06ad2937945f8c44eb2f5a474d430",
        "main": "18de7994b7e1d1b6a336a02316a5b67f9f50c6c8",
        "proj1": "3e50e001d80e2e67c88411f25ee11810f9d08a46",
    },
    h_to_ast: {
        "0dfbbe3ebdabccc91b0146acfcde9c34e0a65d6c": Item::Fn {
            attrs: [],
            vis: Visibility::Public(
                Pub,
            ),
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    proj1,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    x,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                f32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                    Comma,
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    y,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                f32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        f32,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            x,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        None,
                    ),
                ],
            },
        },
        "7d20f63b62bcfd5ba7fceb634e40b5dda91c0c11": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    empty,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        "dcfa986739e2a34a554a213a61499264505a5b57": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    id,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    x,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                i32,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Type(
                    RArrow,
                    Type::Path {
                        qself: None,
                        path: Path {
                            leading_colon: None,
                            segments: [
                                PathSegment {
                                    ident: Ident(
                                        i32,
                                    ),
                                    arguments: PathArguments::None,
                                },
                            ],
                        },
                    },
                ),
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Path {
                            attrs: [],
                            qself: None,
                            path: Path {
                                leading_colon: None,
                                segments: [
                                    PathSegment {
                                        ident: Ident(
                                            x,
                                        ),
                                        arguments: PathArguments::None,
                                    },
                                ],
                            },
                        },
                        None,
                    ),
                ],
            },
        },
        "69f4b28bb16b87883685f2fa2b62173a6d37b0e5": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
    },
}


successes:
    tests::test_functions

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

