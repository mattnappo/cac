
running 1 test
test tests::test_refs ... ok

successes:

---- tests::test_refs stdout ----
AST:
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    a,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    b,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Call {
                            attrs: [],
                            func: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                a,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                            paren_token: Paren,
                            args: [],
                        },
                        Some(
                            Semi,
                        ),
                    ),
                ],
            },
        },
        Item::Struct {
            attrs: [],
            vis: Visibility::Inherited,
            struct_token: Struct,
            ident: Ident(
                Unit,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            fields: Fields::Unit,
            semi_token: Some(
                Semi,
            ),
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    c,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    t,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                Unit,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
    ],
}
compiler: Compiler {
    names_to_h: {
        "main": "69f4b28bb16b87883685f2fa2b62173a6d37b0e5",
        "b": "ef030e8a38dcd0ab806eb801bcbc350813e3d463",
        "Unit": "aafed7fcdee7b74ebbd7c0c0e8cb6b102f2c9563",
        "a": "10b0b417fb8e1ab68e371656b6c77334362908cd",
        "c": "59c81357b374bbb02dd133f0723b49f916129591",
    },
    h_to_ast: {
        "aafed7fcdee7b74ebbd7c0c0e8cb6b102f2c9563": Item::Struct {
            attrs: [],
            vis: Visibility::Inherited,
            struct_token: Struct,
            ident: Ident(
                Unit,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            fields: Fields::Unit,
            semi_token: Some(
                Semi,
            ),
        },
        "10b0b417fb8e1ab68e371656b6c77334362908cd": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    a,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        "59c81357b374bbb02dd133f0723b49f916129591": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    c,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [
                    FnArg::Typed(
                        PatType {
                            attrs: [],
                            pat: Pat::Ident {
                                attrs: [],
                                by_ref: None,
                                mutability: None,
                                ident: Ident(
                                    t,
                                ),
                                subpat: None,
                            },
                            colon_token: Colon,
                            ty: Type::Path {
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                Unit,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                        },
                    ),
                ],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        "69f4b28bb16b87883685f2fa2b62173a6d37b0e5": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        "ef030e8a38dcd0ab806eb801bcbc350813e3d463": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    b,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [
                    Stmt::Expr(
                        Expr::Call {
                            attrs: [],
                            func: Expr::Path {
                                attrs: [],
                                qself: None,
                                path: Path {
                                    leading_colon: None,
                                    segments: [
                                        PathSegment {
                                            ident: Ident(
                                                a,
                                            ),
                                            arguments: PathArguments::None,
                                        },
                                    ],
                                },
                            },
                            paren_token: Paren,
                            args: [],
                        },
                        Some(
                            Semi,
                        ),
                    ),
                ],
            },
        },
    },
}


successes:
    tests::test_refs

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

