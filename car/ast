
running 1 test
test tests::test_refs2 ... ok

successes:

---- tests::test_refs2 stdout ----
AST:
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                B,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        X,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        Y,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
            ],
        },
        Item::Struct {
            attrs: [],
            vis: Visibility::Inherited,
            struct_token: Struct,
            ident: Ident(
                X,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            fields: Fields::Unit,
            semi_token: Some(
                Semi,
            ),
        },
        Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                A,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        V,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        U,
                    ),
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        x,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        T,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    X,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
            ],
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
    ],
}
DAG: {
    "B": {},
    "X": {},
    "A": {
        "X",
        "B",
    },
}
AST AFTER LINKING:
File {
    shebang: None,
    attrs: [],
    items: [
        Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                B,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        X,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        Y,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
            ],
        },
        Item::Struct {
            attrs: [],
            vis: Visibility::Inherited,
            struct_token: Struct,
            ident: Ident(
                X,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            fields: Fields::Unit,
            semi_token: Some(
                Semi,
            ),
        },
        Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                A,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        V,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        U,
                    ),
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        x,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        T,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    X,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
            ],
        },
        Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
    ],
}
compiler: Compiler {
    names_to_h: {
        "X": "3349cd07b06bc01e90807833f3f6ea7d8add87d0",
        "B": "7911efdb2ca269350593db6b658c4ba409815e7b",
        "A": "e8a21c55c349dfa7cbcd658de59c5271b9430123",
        "main": "69f4b28bb16b87883685f2fa2b62173a6d37b0e5",
    },
    h_to_ast: {
        "e8a21c55c349dfa7cbcd658de59c5271b9430123": Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                A,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        V,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        U,
                    ),
                    fields: Fields::Named {
                        brace_token: Brace,
                        named: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: Some(
                                    Ident(
                                        x,
                                    ),
                                ),
                                colon_token: Some(
                                    Colon,
                                ),
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    B,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        T,
                    ),
                    fields: Fields::Unnamed {
                        paren_token: Paren,
                        unnamed: [
                            Field {
                                attrs: [],
                                vis: Visibility::Inherited,
                                mutability: FieldMutability::None,
                                ident: None,
                                colon_token: None,
                                ty: Type::Path {
                                    qself: None,
                                    path: Path {
                                        leading_colon: None,
                                        segments: [
                                            PathSegment {
                                                ident: Ident(
                                                    X,
                                                ),
                                                arguments: PathArguments::None,
                                            },
                                        ],
                                    },
                                },
                            },
                        ],
                    },
                    discriminant: None,
                },
                Comma,
            ],
        },
        "69f4b28bb16b87883685f2fa2b62173a6d37b0e5": Item::Fn {
            attrs: [],
            vis: Visibility::Inherited,
            sig: Signature {
                constness: None,
                asyncness: None,
                unsafety: None,
                abi: None,
                fn_token: Fn,
                ident: Ident(
                    main,
                ),
                generics: Generics {
                    lt_token: None,
                    params: [],
                    gt_token: None,
                    where_clause: None,
                },
                paren_token: Paren,
                inputs: [],
                variadic: None,
                output: ReturnType::Default,
            },
            block: Block {
                brace_token: Brace,
                stmts: [],
            },
        },
        "3349cd07b06bc01e90807833f3f6ea7d8add87d0": Item::Struct {
            attrs: [],
            vis: Visibility::Inherited,
            struct_token: Struct,
            ident: Ident(
                X,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            fields: Fields::Unit,
            semi_token: Some(
                Semi,
            ),
        },
        "7911efdb2ca269350593db6b658c4ba409815e7b": Item::Enum {
            attrs: [],
            vis: Visibility::Inherited,
            enum_token: Enum,
            ident: Ident(
                B,
            ),
            generics: Generics {
                lt_token: None,
                params: [],
                gt_token: None,
                where_clause: None,
            },
            brace_token: Brace,
            variants: [
                Variant {
                    attrs: [],
                    ident: Ident(
                        X,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
                Variant {
                    attrs: [],
                    ident: Ident(
                        Y,
                    ),
                    fields: Fields::Unit,
                    discriminant: None,
                },
                Comma,
            ],
        },
    },
}


successes:
    tests::test_refs2

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 3 filtered out; finished in 0.01s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

